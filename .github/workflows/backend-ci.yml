name: Backend CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
      - 'gradle/**'
      - 'build.gradle'
      - 'settings.gradle'
      - 'gradle.properties'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
      - 'gradle/**'
      - 'build.gradle'
      - 'settings.gradle'
      - 'gradle.properties'
  schedule:
    - cron: '30 1 * * 0'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Build with Gradle
      working-directory: ./backend
      run: gradle build
      
    - name: Run tests
      working-directory: ./backend
      run: gradle test
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: backend/build/reports/tests/
        retention-days: 30
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: spring-boot-app
        path: backend/build/libs/*.jar
        retention-days: 7

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    permissions:
      security-events: write
      actions: read
      contents: read
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: java
        queries: security-and-quality
        
    - name: Autobuild Java
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:java"

  vulnerability-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Build project for dependency resolution
      working-directory: ./backend
      run: gradle classes

    - name: Run Trivy vulnerability scanner (Critical/High only)
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './backend'
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: 1  # Fail build only on Critical/High vulnerabilities
        severity: 'CRITICAL,HIGH'

    - name: Upload Trivy results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Generate full Trivy report for all severities
      run: |
        trivy filesystem --format table --exit-code 0 ./backend

    - name: Generate Critical/High only report
      run: |
        echo "=== CRITICAL & HIGH VULNERABILITIES ==="
        trivy filesystem --format table --severity CRITICAL,HIGH ./backend || true

    - name: Upload Trivy report artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-security-scan
        path: trivy-results.sarif
        retention-days: 30
        
  notify:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan, vulnerability-scan]
    if: always()
    
    steps:
    - name: Determine status
      id: status
      run: |
        if [ "${{ needs.build-and-test.result }}" == "success" ] && [ "${{ needs.security-scan.result }}" == "success" ] && [ "${{ needs.vulnerability-scan.result }}" == "success" ]; then
          echo "EMOJI=✅" >> $GITHUB_OUTPUT
          echo "STATUS=All checks passed" >> $GITHUB_OUTPUT
        else
          echo "EMOJI=⚠️" >> $GITHUB_OUTPUT
          echo "STATUS=Some checks failed" >> $GITHUB_OUTPUT
        fi

    - name: Send email notification
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.SMTP_USERNAME }}
        password: ${{ secrets.SMTP_PASSWORD }}
        subject: "${{ steps.status.outputs.EMOJI }} Backend CI: ${{ github.sha }}"
        body: |
          ${{ steps.status.outputs.STATUS }}
          
          📋 **Pipeline Summary:**
          - Repository: ${{ github.repository }}
          - Commit: ${{ github.sha }}
          - Branch: ${{ github.ref_name }}
          - Triggered by: ${{ github.actor }}
          
          🔍 **Job Results:**
          - Build & Test: ${{ needs.build-and-test.result }}
          - Security Scan: ${{ needs.security-scan.result }}
          - Vulnerability Scan: ${{ needs.vulnerability-scan.result }}
          
          📎 **Links:**
          - Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          - Commit: ${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}
        to: ${{ secrets.NOTIFICATION_EMAILS }}
        from: GitHub Actions <${{ secrets.SMTP_USERNAME }}>