name: Deploy Frontend
on:
  push:
    branches: [main, develop]
    paths:
      - 'frontend/**'
  workflow_dispatch:
jobs:
  build-and-push-frontend:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ca-central-1
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Extract short SHA
      id: sha
      run: echo "short_sha=${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT

    - name: Debug SHA value
      run: |
        echo "GITHUB_SHA: $GITHUB_SHA"
        echo "Short SHA: ${{ steps.sha.outputs.short_sha }}"
    
    - name: Build Docker image for scanning
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: 995596895848.dkr.ecr.ca-central-1.amazonaws.com/drivelink/engaged:frontend-app-${{ steps.sha.outputs.short_sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=docker,dest=/tmp/frontend-image.tar

    - name: Debug - Check if image tar exists
      run: |
        echo "=== Checking for image tar file ==="
        if [ -f /tmp/frontend-image.tar ]; then
          echo "✅ Image tar file found at /tmp/frontend-image.tar"
          echo "File size: $(wc -c < /tmp/frontend-image.tar) bytes"
        else
          echo "❌ Image tar file not found at /tmp/frontend-image.tar"
          echo "=== Checking /tmp directory ==="
          ls -la /tmp/ | grep -E "(image|tar)" || echo "No image tar files found"
        fi

    - name: Run Trivy vulnerability scanner - SARIF format
      uses: aquasecurity/trivy-action@0.28.0
      with:
        input: /tmp/frontend-image.tar
        format: 'sarif'
        output: 'trivy-frontend-results.sarif'
        severity: 'CRITICAL,HIGH'
        scan-type: 'image'
        exit-code: 0
      continue-on-error: true

    - name: Run Trivy vulnerability scanner - JSON format
      uses: aquasecurity/trivy-action@0.28.0
      with:
        input: /tmp/frontend-image.tar
        format: 'json'
        output: 'trivy-frontend-results.json'
        severity: 'CRITICAL,HIGH,MEDIUM,LOW'
        scan-type: 'image'
        exit-code: 0
      continue-on-error: true
      
    - name: Debug - Check if SARIF file exists
      run: |
        echo "=== Current directory contents ==="
        ls -la
        echo "=== Checking for SARIF file ==="
        if [ -f trivy-frontend-results.sarif ]; then
          echo "✅ SARIF file found"
          echo "File size: $(wc -c < trivy-frontend-results.sarif) bytes"
        else
          echo "❌ SARIF file not found in current directory"
          echo "=== Checking entire workspace ==="
          find . -name "*.sarif" -type f 2>/dev/null || echo "No SARIF files found"
        fi

    - name: Debug - Check if JSON file exists
      run: |
        echo "=== Checking for JSON file ==="
        if [ -f trivy-frontend-results.json ]; then
          echo "✅ JSON file found"
          echo "File size: $(wc -c < trivy-frontend-results.json) bytes"
          echo "=== Checking JSON structure ==="
          jq -r '. | keys' trivy-frontend-results.json 2>/dev/null || echo "Invalid JSON structure"
        else
          echo "❌ JSON file not found"
        fi

    - name: Validate and prepare SARIF file
      run: |
        if [ -f trivy-frontend-results.sarif ]; then
          echo "=== SARIF File Details ==="
          echo "File size: $(wc -c < trivy-frontend-results.sarif) bytes"
          echo "Results found: $(jq -r '.runs[0].results | length' trivy-frontend-results.sarif 2>/dev/null || echo "0")"
          
          # Ensure proper SARIF structure
          if command -v jq >/dev/null 2>&1; then
            jq '
              .runs[0].tool.driver.name = "Trivy" |
              .runs[0].tool.driver.informationUri = "https://github.com/aquasecurity/trivy" |
              .runs[0].automationDetails = {"id": "trivy-frontend-scan"}
            ' trivy-frontend-results.sarif > trivy-frontend-results-fixed.sarif
            mv trivy-frontend-results-fixed.sarif trivy-frontend-results.sarif
            echo "✅ SARIF file prepared for GitHub"
          else
            echo "⚠️ jq not available, using original SARIF file"
          fi
        else
          echo "⚠️ SARIF file not found - creating empty SARIF file"
          echo '{"version":"2.1.0","runs":[{"tool":{"driver":{"name":"Trivy","informationUri":"https://github.com/aquasecurity/trivy"}},"automationDetails":{"id":"trivy-frontend-scan"},"results":[]}]}' > trivy-frontend-results.sarif
          echo "✅ Empty SARIF file created"
        fi

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-frontend-results.sarif'
        category: 'trivy-frontend'
        wait-for-processing: false

    - name: Upload vulnerability reports as artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: frontend-vulnerability-reports
        path: |
          trivy-frontend-results.sarif
          trivy-frontend-results.json
        retention-days: 30
        compression-level: 9
        
    - name: Debug - Show upload result
      run: |
        echo "=== Frontend Upload Status ==="
        echo "SARIF file uploaded to GitHub Security tab"
        echo "All frontend reports available as downloadable artifacts"
        echo "Check GitHub Security tab: https://github.com/${{ github.repository }}/security/code-scanning"
        echo "Download artifacts from workflow run page"

    - name: Check for critical vulnerabilities
      id: frontend-scan-check
      run: |
        if [ -f trivy-frontend-results.json ]; then
          # Parse JSON for more accurate counts
          CRITICAL_COUNT=$(jq -r '[.Results[].Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' trivy-frontend-results.json 2>/dev/null || echo "0")
          HIGH_COUNT=$(jq -r '[.Results[].Vulnerabilities[]? | select(.Severity == "HIGH")] | length' trivy-frontend-results.json 2>/dev/null || echo "0")
          MEDIUM_COUNT=$(jq -r '[.Results[].Vulnerabilities[]? | select(.Severity == "MEDIUM")] | length' trivy-frontend-results.json 2>/dev/null || echo "0")
          LOW_COUNT=$(jq -r '[.Results[].Vulnerabilities[]? | select(.Severity == "LOW")] | length' trivy-frontend-results.json 2>/dev/null || echo "0")
          TOTAL_CRITICAL_HIGH=$((CRITICAL_COUNT + HIGH_COUNT))
          TOTAL_VULNERABILITIES=$((CRITICAL_COUNT + HIGH_COUNT + MEDIUM_COUNT + LOW_COUNT))
          
          echo "=== Frontend Vulnerability Summary ==="
          echo "CRITICAL: $CRITICAL_COUNT"
          echo "HIGH: $HIGH_COUNT" 
          echo "MEDIUM: $MEDIUM_COUNT"
          echo "LOW: $LOW_COUNT"
          echo "TOTAL: $TOTAL_VULNERABILITIES"
          
          if [ "$TOTAL_CRITICAL_HIGH" -gt 0 ]; then
            echo "⚠️ Found $TOTAL_CRITICAL_HIGH CRITICAL/HIGH vulnerabilities in the frontend image (total vulnerabilities: $TOTAL_VULNERABILITIES)"
            echo "scan_status=passed_with_vulnerabilities" >> $GITHUB_OUTPUT
            echo "vulnerability_count=$TOTAL_CRITICAL_HIGH" >> $GITHUB_OUTPUT
          else
            echo "✅ No CRITICAL/HIGH vulnerabilities found in frontend ($TOTAL_VULNERABILITIES medium/low vulnerabilities detected)"
            echo "scan_status=passed" >> $GITHUB_OUTPUT
            echo "vulnerability_count=0" >> $GITHUB_OUTPUT
          fi
        else
          echo "❌ Frontend scan results not found"
          echo "scan_status=error" >> $GITHUB_OUTPUT
          exit 1
        fi
    
    - name: Push Frontend Docker image to ECR
      if: steps.frontend-scan-check.outputs.scan_status == 'passed' || steps.frontend-scan-check.outputs.scan_status == 'passed_with_vulnerabilities'
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: 995596895848.dkr.ecr.ca-central-1.amazonaws.com/drivelink/engaged:frontend-app-${{ steps.sha.outputs.short_sha }}
        cache-from: type=gha

    - name: Verify pushed frontend image
      if: steps.frontend-scan-check.outputs.scan_status == 'passed' || steps.frontend-scan-check.outputs.scan_status == 'passed_with_vulnerabilities'
      run: |
        echo "Frontend Docker image pushed to ECR successfully"
        echo "Full SHA: ${{ github.sha }}"
        echo "Short SHA: ${{ steps.sha.outputs.short_sha }}"
        echo "Repository: 995596895848.dkr.ecr.ca-central-1.amazonaws.com/drivelink/engaged:frontend-app-${{ steps.sha.outputs.short_sha }}"
        if [ "${{ steps.frontend-scan-check.outputs.scan_status }}" == "passed_with_vulnerabilities" ]; then
          echo "⚠️ WARNING: frontend image pushed with ${{ steps.frontend-scan-check.outputs.vulnerability_count }} CRITICAL/HIGH vulnerabilities"
        fi
        
    - name: Send email notification
      if: always()
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.SMTP_USERNAME }}
        password: ${{ secrets.SMTP_PASSWORD }}
        subject: |
          ${{ job.status == 'success' && '✅ SUCCESS: Frontend Deployment' || '❌ FAILED: Frontend Deployment' }}
          - ${{ github.repository }} - ${{ github.ref_name }}
        to: ${{ secrets.NOTIFICATION_EMAILS }}
        from: GitHub Actions <${{ secrets.SMTP_USERNAME }}>
        body: |
          Frontend Docker Image Build and Deployment Result
          
          Repository: ${{ github.repository }}
          Branch: ${{ github.ref_name }}
          Commit SHA: ${{ github.sha }} (${{ steps.sha.outputs.short_sha }})
          Workflow: ${{ github.workflow }}
          Triggered by: ${{ github.actor }}
          
          Build Status: ${{ job.status }}
          Security Scan: ${{ steps.frontend-scan-check.outputs.scan_status || 'Not completed' }}
          Critical/High Vulnerabilities: ${{ steps.frontend-scan-check.outputs.vulnerability_count || '0' }}
          
          Vulnerability Reports:
          - SARIF Report: Available in GitHub Security tab
          - All Reports: Download from workflow artifacts
          
          ${{ job.status == 'success' && steps.frontend-scan-check.outputs.scan_status == 'passed' && '✅ Frontend image successfully built, scanned, and pushed to ECR' }}
          ${{ job.status == 'success' && steps.frontend-scan-check.outputs.scan_status == 'passed_with_vulnerabilities' && '⚠️ Frontend image pushed with vulnerabilities - review security scan results' }}
          ${{ job.status == 'failure' && '❌ Frontend deployment failed - check workflow logs for details' }}
          
          Image Tag: 995596895848.dkr.ecr.ca-central-1.amazonaws.com/drivelink/engaged:frontend-app-${{ steps.sha.outputs.short_sha }}
          
          View workflow run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          Download reports: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts
          Security scan results: https://github.com/${{ github.repository }}/security/code-scanning
          Commit: https://github.com/${{ github.repository }}/commit/${{ github.sha }}