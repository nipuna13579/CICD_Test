still this report can caouse intentation issues ??  name: Deploy Frontend
on:
  push:
    branches: [main, develop]
    paths:
      - 'frontend/**'
  workflow_dispatch:
jobs:
  build-and-push-frontend:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ca-central-1
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Extract short SHA
      id: sha
      run: echo "short_sha=${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT

    - name: Debug SHA value
      run: |
        echo "GITHUB_SHA: $GITHUB_SHA"
        echo "Short SHA: ${{ steps.sha.outputs.short_sha }}"
    
    - name: Build Docker image for scanning
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: 995596895848.dkr.ecr.ca-central-1.amazonaws.com/drivelink/engaged:frontend-app-${{ steps.sha.outputs.short_sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=docker,dest=/tmp/image.tar

    - name: Run Trivy vulnerability scanner - SARIF format
      uses: aquasecurity/trivy-action@0.28.0
      with:
        input: /tmp/image.tar
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM,LOW'
        scan-type: 'image'
        exit-code: 0
      continue-on-error: true

    - name: Run Trivy vulnerability scanner - JSON format
      uses: aquasecurity/trivy-action@0.28.0
      with:
        input: /tmp/image.tar
        format: 'json'
        output: 'trivy-results.json'
        severity: 'CRITICAL,HIGH,MEDIUM,LOW'
        scan-type: 'image'
        exit-code: 0
      continue-on-error: true

    - name: Debug - Check if report files exist
      run: |
        echo "=== Current directory contents ==="
        ls -la
        echo "=== Checking for report files ==="
        for file in trivy-results.sarif trivy-results.json; do
          if [ -f "$file" ]; then
            echo "‚úÖ $file found - $(wc -c < "$file") bytes"
          else
            echo "‚ùå $file not found"
          fi
        done

    - name: Validate and prepare SARIF file
      run: |
        if [ -f trivy-results.sarif ]; then
          echo "=== SARIF File Details ==="
          echo "File size: $(wc -c < trivy-results.sarif) bytes"
          echo "Results found: $(jq -r '.runs[0].results | length' trivy-results.sarif 2>/dev/null || echo "0")"
          
          # Ensure proper SARIF structure
          if command -v jq >/dev/null 2>&1; then
            jq '
              .runs[0].tool.driver.name = "Trivy" |
              .runs[0].tool.driver.informationUri = "https://github.com/aquasecurity/trivy" |
              .runs[0].automationDetails = {"id": "trivy-scan"}
            ' trivy-results.sarif > trivy-results-fixed.sarif
            mv trivy-results-fixed.sarif trivy-results.sarif
            echo "‚úÖ SARIF file prepared for GitHub"
          else
            echo "‚ö†Ô∏è jq not available, using original SARIF file"
          fi
        else
          echo "‚ö†Ô∏è SARIF file not found - creating empty SARIF file"
          echo '{"version":"2.1.0","runs":[{"tool":{"driver":{"name":"Trivy","informationUri":"https://github.com/aquasecurity/trivy"}},"automationDetails":{"id":"trivy-scan"},"results":[]}]}' > trivy-results.sarif
          echo "‚úÖ Empty SARIF file created"
        fi

    - name: Generate HTML reports using Python
      run: |
        if [ -f trivy-results.json ]; then
          echo "Generating HTML reports using Python..."
          
          # Create a Python script to generate both reports
          cat > generate_reports.py << 'EOF'
import json
import os
from datetime import datetime

def generate_simple_report(data, repo, image_tag, short_sha):
    """Generate a simple HTML report"""
    critical = high = medium = low = 0
    vulnerabilities_html = ""
    
    for result in data.get('Results', []):
        for vuln in result.get('Vulnerabilities', []):
            severity = vuln.get('Severity', 'UNKNOWN')
            if severity == 'CRITICAL':
                critical += 1
            elif severity == 'HIGH':
                high += 1
            elif severity == 'MEDIUM':
                medium += 1
            elif severity == 'LOW':
                low += 1
            
            # Create vulnerability card
            bg_class = f"{severity.lower()}-bg"
            severity_class = f"severity-{severity.lower()}"
            
            vulnerabilities_html += f'''
            <div class="vulnerability {bg_class}">
                <h3>{vuln.get('VulnerabilityID', 'Unknown')} - {vuln.get('PkgName', 'Unknown')} {vuln.get('InstalledVersion', '')}</h3>
                <p><strong>Severity:</strong> <span class="severity {severity_class}">{severity}</span></p>
                <p><strong>Fixed Version:</strong> {vuln.get('FixedVersion', 'Not Fixed')}</p>
                <p><strong>Description:</strong> {vuln.get('Description', 'No description available')}</p>
            </div>
            '''
    
    html_content = f'''<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Trivy Vulnerability Report</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 20px; background-color: #f5f5f5; }}
        .container {{ max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }}
        .header {{ background: #2c3e50; color: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; }}
        .summary {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 20px; }}
        .summary-card {{ background: #f8f9fa; padding: 15px; border-radius: 6px; border-left: 4px solid; text-align: center; }}
        .critical {{ border-left-color: #dc3545; }}
        .high {{ border-left-color: #fd7e14; }}
        .medium {{ border-left-color: #ffc107; }}
        .low {{ border-left-color: #28a745; }}
        .vulnerability {{ border: 1px solid #ddd; margin: 10px 0; padding: 15px; border-radius: 6px; }}
        .critical-bg {{ background: #ffe6e6; }}
        .high-bg {{ background: #fff3e6; }}
        .medium-bg {{ background: #fffce6; }}
        .low-bg {{ background: #e6ffe6; }}
        .severity {{ display: inline-block; padding: 4px 8px; border-radius: 4px; color: white; font-weight: bold; }}
        .severity-critical {{ background: #dc3545; }}
        .severity-high {{ background: #fd7e14; }}
        .severity-medium {{ background: #ffc107; color: black; }}
        .severity-low {{ background: #28a745; }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üîç Trivy Vulnerability Report</h1>
            <p><strong>Repository:</strong> {repo}</p>
            <p><strong>Image:</strong> {image_tag}</p>
            <p><strong>Scan Date:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
        </div>
        <div class="summary">
            <div class="summary-card critical">
                <h3>CRITICAL</h3>
                <h2>{critical}</h2>
            </div>
            <div class="summary-card high">
                <h3>HIGH</h3>
                <h2>{high}</h2>
            </div>
            <div class="summary-card medium">
                <h3>MEDIUM</h3>
                <h2>{medium}</h2>
            </div>
            <div class="summary-card low">
                <h3>LOW</h3>
                <h2>{low}</h2>
            </div>
        </div>
        <h2>Vulnerability Details</h2>
'''
    
    if vulnerabilities_html:
        html_content += vulnerabilities_html
    else:
        html_content += '''
        <div style="text-align: center; padding: 40px;">
            <h2>‚úÖ No Vulnerabilities Found</h2>
            <p>The container image passed all security scans.</p>
        </div>
'''
    
    html_content += '''
    </div>
</body>
</html>'''
    
    return html_content

def generate_enhanced_report(data):
    """Generate an enhanced HTML report with more details"""
    critical = high = medium = low = 0
    vulnerabilities_html = ""
    
    for result in data.get('Results', []):
        for vuln in result.get('Vulnerabilities', []):
            severity = vuln.get('Severity', 'UNKNOWN')
            if severity == 'CRITICAL':
                critical += 1
            elif severity == 'HIGH':
                high += 1
            elif severity == 'MEDIUM':
                medium += 1
            elif severity == 'LOW':
                low += 1
            
            # Create enhanced vulnerability card
            vulnerabilities_html += f'''
            <div class="vulnerability {severity.lower()}-bg">
                <h3>{vuln.get('VulnerabilityID', 'Unknown')} - {vuln.get('PkgName', 'Unknown')} {vuln.get('InstalledVersion', '')}</h3>
                <p><strong>Severity:</strong> <span class="severity severity-{severity.lower()}">{severity}</span></p>
                <p><strong>Description:</strong> {vuln.get('Description', 'No description available')}</p>
                <p><strong>Fixed Version:</strong> {vuln.get('FixedVersion', 'Not Fixed')}</p>
                {f'<p><strong>Reference:</strong> <a href="{vuln.get("PrimaryURL", "")}" target="_blank">{vuln.get("PrimaryURL", "")}</a></p>' if vuln.get('PrimaryURL') else ''}
            </div>
            '''
    
    html_content = f'''<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Enhanced Trivy Report</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 20px; background-color: #f5f5f5; }}
        .container {{ max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }}
        .header {{ background: #2c3e50; color: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; }}
        .summary {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 20px; }}
        .summary-card {{ background: #f8f9fa; padding: 15px; border-radius: 6px; border-left: 4px solid; text-align: center; }}
        .critical {{ border-left-color: #dc3545; }}
        .high {{ border-left-color: #fd7e14; }}
        .medium {{ border-left-color: #ffc107; }}
        .low {{ border-left-color: #28a745; }}
        .vulnerability {{ border: 1px solid #ddd; margin: 10px 0; padding: 15px; border-radius: 6px; }}
        .critical-bg {{ background: #ffe6e6; }}
        .high-bg {{ background: #fff3e6; }}
        .medium-bg {{ background: #fffce6; }}
        .low-bg {{ background: #e6ffe6; }}
        .severity {{ display: inline-block; padding: 4px 8px; border-radius: 4px; color: white; font-weight: bold; }}
        .severity-critical {{ background: #dc3545; }}
        .severity-high {{ background: #fd7e14; }}
        .severity-medium {{ background: #ffc107; color: black; }}
        .severity-low {{ background: #28a745; }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üîç Enhanced Trivy Vulnerability Report</h1>
            <p><strong>Scan Date:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
        </div>
        <div class="summary">
            <div class="summary-card critical">
                <h3>CRITICAL</h3>
                <h2>{critical}</h2>
            </div>
            <div class="summary-card high">
                <h3>HIGH</h3>
                <h2>{high}</h2>
            </div>
            <div class="summary-card medium">
                <h3>MEDIUM</h3>
                <h2>{medium}</h2>
            </div>
            <div class="summary-card low">
                <h3>LOW</h3>
                <h2>{low}</h2>
            </div>
        </div>
        <div id="vulnerabilities">
            <h2>Vulnerabilities</h2>
            {('<div style="text-align: center; padding: 40px;"><h2>‚úÖ No Vulnerabilities Found</h2></div>' 
              if not vulnerabilities_html else vulnerabilities_html)}
        </div>
    </div>
</body>
</html>'''
    
    return html_content

# Main execution
try:
    with open('trivy-results.json', 'r') as f:
        data = json.load(f)
    
    # Get repository info from environment
    repo = os.environ.get('GITHUB_REPOSITORY', 'Unknown Repository')
    image_tag = f"995596895848.dkr.ecr.ca-central-1.amazonaws.com/drivelink/engaged:frontend-app-{os.environ.get('SHORT_SHA', 'unknown')}"
    
    # Generate simple report
    simple_html = generate_simple_report(data, repo, image_tag, os.environ.get('SHORT_SHA', 'unknown'))
    with open('trivy-simple-report.html', 'w') as f:
        f.write(simple_html)
    print("‚úÖ Simple HTML report generated")
    
    # Generate enhanced report
    enhanced_html = generate_enhanced_report(data)
    with open('trivy-enhanced-report.html', 'w') as f:
        f.write(enhanced_html)
    print("‚úÖ Enhanced HTML report generated")
    
except Exception as e:
    print(f"‚ùå Error generating reports: {e}")
    # Create error reports
    with open('trivy-simple-report.html', 'w') as f:
        f.write('''
        <!DOCTYPE html>
        <html>
        <head><title>Error - Trivy Report</title></head>
        <body>
            <h1>Error Generating Report</h1>
            <p>Failed to generate vulnerability report.</p>
        </body>
        </html>''')
    
    with open('trivy-enhanced-report.html', 'w') as f:
        f.write('''
        <!DOCTYPE html>
        <html>
        <head><title>Error - Enhanced Trivy Report</title></head>
        <body>
            <h1>Error Generating Enhanced Report</h1>
            <p>Failed to generate enhanced vulnerability report.</p>
        </body>
        </html>''')
EOF

          # Set environment variables for Python script
          export SHORT_SHA="${{ steps.sha.outputs.short_sha }}"
          
          # Run the Python script
          python3 generate_reports.py
          echo "‚úÖ Both HTML reports generated successfully"
          
        else
          echo "‚ö†Ô∏è JSON results not available for HTML report generation"
          # Create empty reports
          cat > trivy-simple-report.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head><title>Trivy Report - No Data</title></head>
          <body>
              <h1>No Scan Data Available</h1>
              <p>Trivy scan results were not generated or not found.</p>
          </body>
          </html>
          EOF
          
          cat > trivy-enhanced-report.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head><title>Enhanced Trivy Report - No Data</title></head>
          <body>
              <h1>No Scan Data Available</h1>
              <p>Trivy scan results were not generated or not found.</p>
          </body>
          </html>
          EOF
        fi

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        category: 'trivy'
        wait-for-processing: false

    - name: Upload vulnerability reports as artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: vulnerability-reports
        path: |
          trivy-results.sarif
          trivy-results.json
          trivy-simple-report.html
          trivy-enhanced-report.html
        retention-days: 30
        compression-level: 9

    - name: Debug - Show upload result
      run: |
        echo "=== Upload Status ==="
        echo "SARIF file uploaded to GitHub Security tab"
        echo "All reports available as downloadable artifacts"
        echo "Check GitHub Security tab: https://github.com/${{ github.repository }}/security/code-scanning"
        echo "Download artifacts from workflow run page"

    - name: Check for critical vulnerabilities
      id: scan-check
      run: |
        if [ -f trivy-results.json ]; then
          # Parse JSON for more accurate counts
          CRITICAL_COUNT=$(jq -r '[.Results[].Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' trivy-results.json 2>/dev/null || echo "0")
          HIGH_COUNT=$(jq -r '[.Results[].Vulnerabilities[]? | select(.Severity == "HIGH")] | length' trivy-results.json 2>/dev/null || echo "0")
          MEDIUM_COUNT=$(jq -r '[.Results[].Vulnerabilities[]? | select(.Severity == "MEDIUM")] | length' trivy-results.json 2>/dev/null || echo "0")
          LOW_COUNT=$(jq -r '[.Results[].Vulnerabilities[]? | select(.Severity == "LOW")] | length' trivy-results.json 2>/dev/null || echo "0")
          TOTAL_CRITICAL_HIGH=$((CRITICAL_COUNT + HIGH_COUNT))
          TOTAL_VULNERABILITIES=$((CRITICAL_COUNT + HIGH_COUNT + MEDIUM_COUNT + LOW_COUNT))
          
          echo "=== Vulnerability Summary ==="
          echo "CRITICAL: $CRITICAL_COUNT"
          echo "HIGH: $HIGH_COUNT" 
          echo "MEDIUM: $MEDIUM_COUNT"
          echo "LOW: $LOW_COUNT"
          echo "TOTAL: $TOTAL_VULNERABILITIES"
          
          if [ "$TOTAL_CRITICAL_HIGH" -gt 0 ]; then
            echo "‚ö†Ô∏è Found $TOTAL_CRITICAL_HIGH CRITICAL/HIGH vulnerabilities in the image (total vulnerabilities: $TOTAL_VULNERABILITIES)"
            echo "scan_status=passed_with_vulnerabilities" >> $GITHUB_OUTPUT
            echo "vulnerability_count=$TOTAL_CRITICAL_HIGH" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ No CRITICAL/HIGH vulnerabilities found ($TOTAL_VULNERABILITIES medium/low vulnerabilities detected)"
            echo "scan_status=passed" >> $GITHUB_OUTPUT
            echo "vulnerability_count=0" >> $GITHUB_OUTPUT
          fi
        else
          echo "‚ùå Scan results not found"
          echo "scan_status=error" >> $GITHUB_OUTPUT
          exit 1
        fi
    
    - name: Push Docker image to ECR
      if: steps.scan-check.outputs.scan_status == 'passed' || steps.scan-check.outputs.scan_status == 'passed_with_vulnerabilities'
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: 995596895848.dkr.ecr.ca-central-1.amazonaws.com/drivelink/engaged:frontend-app-${{ steps.sha.outputs.short_sha }}
        cache-from: type=gha

    - name: Verify pushed image
      if: steps.scan-check.outputs.scan_status == 'passed' || steps.scan-check.outputs.scan_status == 'passed_with_vulnerabilities'
      run: |
        echo "Frontend Docker image pushed to ECR successfully"
        echo "Full SHA: ${{ github.sha }}"
        echo "Short SHA: ${{ steps.sha.outputs.short_sha }}"
        echo "Repository: 995596895848.dkr.ecr.ca-central-1.amazonaws.com/drivelink/engaged:frontend-app-${{ steps.sha.outputs.short_sha }}"
        if [ "${{ steps.scan-check.outputs.scan_status }}" == "passed_with_vulnerabilities" ]; then
          echo "‚ö†Ô∏è WARNING: Image pushed with ${{ steps.scan-check.outputs.vulnerability_count }} CRITICAL/HIGH vulnerabilities"
        fi
        
    - name: Send email notification
      if: always()
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.SMTP_USERNAME }}
        password: ${{ secrets.SMTP_PASSWORD }}
        subject: |
          ${{ job.status == 'success' && '‚úÖ SUCCESS: Frontend Deployment' || '‚ùå FAILED: Frontend Deployment' }}
          - ${{ github.repository }} - ${{ github.ref_name }}
        to: ${{ secrets.NOTIFICATION_EMAILS }}
        from: GitHub Actions <${{ secrets.SMTP_USERNAME }}>
        attachments: |
          trivy-simple-report.html
          trivy-enhanced-report.html
        body: |
          Frontend Docker Image Build and Deployment Result
          
          Repository: ${{ github.repository }}
          Branch: ${{ github.ref_name }}
          Commit SHA: ${{ github.sha }} (${{ steps.sha.outputs.short_sha }})
          Workflow: ${{ github.workflow }}
          Triggered by: ${{ github.actor }}
          
          Build Status: ${{ job.status }}
          Security Scan: ${{ steps.scan-check.outputs.scan_status || 'Not completed' }}
          Critical/High Vulnerabilities: ${{ steps.scan-check.outputs.vulnerability_count || '0' }}
          
          Vulnerability Reports:
          - Simple HTML Report: Attached to this email
          - Enhanced HTML Report: Attached to this email  
          - SARIF Report: Available in GitHub Security tab
          - All Reports: Download from workflow artifacts
          
          ${{ job.status == 'success' && steps.scan-check.outputs.scan_status == 'passed' && '‚úÖ Image successfully built, scanned, and pushed to ECR' }}
          ${{ job.status == 'success' && steps.scan-check.outputs.scan_status == 'passed_with_vulnerabilities' && '‚ö†Ô∏è Image pushed with vulnerabilities - review security scan results' }}
          ${{ job.status == 'failure' && '‚ùå Deployment failed - check workflow logs for details' }}
          
          Image Tag: 995596895848.dkr.ecr.ca-central-1.amazonaws.com/drivelink/engaged:frontend-app-${{ steps.sha.outputs.short_sha }}
          
          View workflow run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          Download reports: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts
          Security scan results: https://github.com/${{ github.repository }}/security/code-scanning
          Commit: https://github.com/${{ github.repository }}/commit/${{ github.sha }}